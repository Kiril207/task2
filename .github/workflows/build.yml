name: Build and Package Snake Game

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y clang cmake libsfml-dev

    - name: Build with CMake
      run: |
        mkdir build
        cd build
        cmake -DCMAKE_CXX_COMPILER=clang++ ..
        make

    - name: Create DEB package
      run: |
        mkdir -p snake-game/usr/games
        cp build/snake snake-game/usr/games/
        mkdir -p snake-game/DEBIAN
        echo "Package: snake-game" > snake-game/DEBIAN/control
        echo "Version: 1.0" >> snake-game/DEBIAN/control
        echo "Section: games" >> snake-game/DEBIAN/control
        echo "Priority: optional" >> snake-game/DEBIAN/control
        echo "Architecture: amd64" >> snake-game/DEBIAN/control
        echo "Maintainer: Your Name <your.email@example.com>" >> snake-game/DEBIAN/control
        echo "Description: Simple Snake Game" >> snake-game/DEBIAN/control
        dpkg-deb --build snake-game
        mv snake-game.deb snake-game_1.0_amd64.deb

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: snake-game-deb
        path: snake-game_1.0_amd64.deb

  build-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4

    - name: Build SFML from source
      run: |
        mkdir SFML-2.5.1-build
        cd SFML-2.5.1-build
        cmake ../SFML-2.5.1 -DBUILD_SHARED_LIBS=ON
        cmake --build . --config Release

    - name: Debug SFML Build Output
      run: |
        dir "${{ github.workspace }}\SFML-2.5.1-build\bin\Release"

    - name: Build with CMake
      run: |
        mkdir build
        cd build
        cmake -DSFML_DIR="${{ github.workspace }}\SFML-2.5.1-build" ..
        cmake --build . --config Release

    - name: Copy SFML DLLs
      shell: pwsh
      run: |
        $dllPath = "${{ github.workspace }}\SFML-2.5.1-build\bin\Release"
        Copy-Item "$dllPath\sfml-graphics-2.dll" -Destination "build/Release/" -Force
        Copy-Item "$dllPath\sfml-window-2.dll" -Destination "build/Release/" -Force
        Copy-Item "$dllPath\sfml-system-2.dll" -Destination "build/Release/" -Force

    - name: Create MSI package
      shell: pwsh
      run: |
        $componentGuid = [guid]::NewGuid().ToString().ToUpper()
        $upgradeGuid = [guid]::NewGuid().ToString().ToUpper()
        mkdir -p pkg/INSTALLDIR
        Copy-Item -Path "build/Release/snake.exe" -Destination "pkg/INSTALLDIR/"
        Copy-Item -Path "build/Release/sfml-graphics-2.dll" -Destination "pkg/INSTALLDIR/" -Force
        Copy-Item -Path "build/Release/sfml-window-2.dll" -Destination "pkg/INSTALLDIR/" -Force
        Copy-Item -Path "build/Release/sfml-system-2.dll" -Destination "pkg/INSTALLDIR/" -Force
        $productWxs = @"
        <?xml version="1.0"?>
        <Wix xmlns="http://schemas.microsoft.com/wix/2006/wi">
          <Product 
            Id="*" 
            Name="Snake Game" 
            Version="1.0" 
            Manufacturer="YourCompany" 
            Language="1033"
            UpgradeCode="$upgradeGuid">
            <Package InstallerVersion="200" Compressed="yes"/>
            <MediaTemplate EmbedCab="yes"/>
            <Directory Id="TARGETDIR" Name="SourceDir">
              <Directory Id="ProgramFilesFolder">
                <Directory Id="INSTALLDIR" Name="Snake Game">
                  <Component Id="MainComponent" Guid="$componentGuid">
                    <File Id="SnakeEXE" Source="pkg/INSTALLDIR/snake.exe" KeyPath="yes"/>
                    <File Id="SFMLGraphics" Source="pkg/INSTALLDIR/sfml-graphics-2.dll" KeyPath="no"/>
                    <File Id="SFMLWindow" Source="pkg/INSTALLDIR/sfml-window-2.dll" KeyPath="no"/>
                    <File Id="SFMLSystem" Source="pkg/INSTALLDIR/sfml-system-2.dll" KeyPath="no"/>
                  </Component>
                </Directory>
              </Directory>
            </Directory>
            <Feature Id="MainFeature" Title="Main Feature" Level="1">
              <ComponentRef Id="MainComponent"/>
            </Feature>
            <UIRef Id="WixUI_InstallDir" />
            <UIRef Id="WixUI_ErrorProgressText" />
            <Property Id="WIXUI_INSTALLDIR" Value="INSTALLDIR" />
          </Product>
        </Wix>
        "@
        Set-Content -Path product.wxs -Value $productWxs
        candle.exe product.wxs
        light.exe product.wixobj -ext WixUIExtension -out snake-game.msi
        if (Test-Path snake-game.msi) {
          Write-Host "MSI package created successfully!"
        } else {
          Write-Host "Failed to create MSI package!"
          exit 1
        }

    - name: Check MSI exists before upload
      shell: pwsh
      run: |
        if (!(Test-Path -Path "snake-game.msi")) {
          Write-Host "snake-game.msi not found!"
          exit 1
        }

    - name: Upload MSI artifact
      uses: actions/upload-artifact@v4
      with:
        name: snake-game-msi
        path: snake-game.msi
