name: Build and Package Snake Game

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y clang cmake libsfml-dev
        
    - name: Build with CMake
      run: |
        mkdir build
        cd build
        cmake -DCMAKE_CXX_COMPILER=clang++ ..
        make
        
    - name: Create DEB package
      run: |
        mkdir -p snake-game/usr/games
        cp build/snake snake-game/usr/games/
        mkdir -p snake-game/DEBIAN
        echo "Package: snake-game" > snake-game/DEBIAN/control
        echo "Version: 1.0" >> snake-game/DEBIAN/control
        echo "Section: games" >> snake-game/DEBIAN/control
        echo "Priority: optional" >> snake-game/DEBIAN/control
        echo "Architecture: amd64" >> snake-game/DEBIAN/control
        echo "Maintainer: Your Name <your.email@example.com>" >> snake-game/DEBIAN/control
        echo "Description: Simple Snake Game" >> snake-game/DEBIAN/control
        dpkg-deb --build snake-game
        mv snake-game.deb snake-game_1.0_amd64.deb
        
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: snake-game-deb
        path: snake-game_1.0_amd64.deb

  build-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        choco install sfml -y
        choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System' -y
        choco install wixtoolset -y  # Установка WiX Toolset
    - name: Install SFML
      run: |
        mkdir -p "C:/tools/SFML"
        $url = "https://www.sfml-dev.org/files/SFML-2.6.1-windows-vc17-64-bit.zip"
        Invoke-WebRequest -Uri $url -OutFile "sfml.zip"
        Expand-Archive -Path "sfml.zip" -DestinationPath "C:/tools/SFML"
        echo "C:/tools/SFML/bin" | Out-File -FilePath $env:GITHUB_PATH -Append
    
    - name: Build with CMake
      run: |
        mkdir build
        cd build
        cmake -DSFML_DIR="C:/tools/SFML" ..
        cmake --build . --config Release --target install
      
    - name: Create MSI package
      run: |
        ###
        - name: Create MSI package
  run: |
    # 1. Создаём структуру папок для установки
    mkdir -p pkg/INSTALLDIR
    cp build/Release/snake.exe pkg/INSTALLDIR/  # Убедитесь, что путь к .exe верный!

    # 2. Генерируем .wxs-файл с помощью heat
    heat dir pkg -cg SnakeGame -gg -scom -sreg -sfrag -srd -dr INSTALLDIR -var var.SourceDir -out snake-game.wxs

    # 3. Компилируем .wxs в .wixobj
    candle -ext WixUIExtension snake-game.wxs -dSourceDir=pkg -out snake-game.wixobj

    # 4. Создаём минимальный .wxs-файл с секцией Product (если heat не добавил её)
    $productWxs = @"
    <?xml version="1.0"?>
    <Wix xmlns="http://schemas.microsoft.com/wix/2006/wi">
      <Product Id="*" Name="Snake Game" Version="1.0" Manufacturer="YourName" Language="1033">
        <Package InstallerVersion="200" Compressed="yes"/>
        <DirectoryRef Id="INSTALLDIR"/>
        <Feature Id="MainFeature" Title="Snake Game" Level="1">
          <ComponentGroupRef Id="SnakeGame"/>
        </Feature>
      </Product>
    </Wix>
    "@
    Set-Content -Path product.wxs -Value $productWxs

    # 5. Компилируем product.wxs
    candle -ext WixUIExtension product.wxs -out product.wixobj

    # 6. Собираем .msi (теперь передаём оба .wixobj)
    light -ext WixUIExtension -out snake-game.msi product.wixobj snake-game.wixobj

    # Проверяем, что .msi создался
    if (Test-Path snake-game.msi) {
      echo "MSI package created successfully!"
    } else {
      echo "Failed to create MSI package!"
      exit 1
    }
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: snake-game-msi
        path: snake-game.msi
